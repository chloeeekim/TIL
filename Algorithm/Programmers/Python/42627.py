"""

디스크 컨트롤러 : https://school.programmers.co.kr/learn/courses/30/lessons/42627

요청 작업들의 정보가 주어졌을 때, 우선순위 컨트롤러가 작업을 처리했을 때 모든 요청 작업의 반환 시간의 평균을 구하는 문제
- 우선순위 디스크 컨트롤러는 다음과 같이 동작한다
    - 1. 어떤 작업 요청이 들어왔을 때, 작업에 대한 정보를 저장해두는 대기 큐가 있다. 처음에 이 큐는 비어 있다
    - 2. 하드디스크가 작업을 하지 않고 있고, 대기 큐가 비어 있지 않다면 가장 우선순위가 높은 작업을 대기 큐에서 꺼내서 작업을 시킨다
        - 이 때, 작업의 소요시간이 짧은 것, 작업의 요청 시각이 빠른 것, 작업의 번호가 작은 것 순으로 우선순위가 높다
    - 3. 하드디스크는 작업을 한 번 시작하면 작업을 마칠 때까지 그 작업만 수행한다
    - 4. 하드디스크가 어떤 작업을 마치는 시점과 다른 작업 요청이 들어오는 시점이 겹친다면 요청이 들어온 작업을 대기 큐에 저장한 뒤, 우선순위가 높은 작업을 대기 큐에서 꺼내 작업을 시킨다
        - 하드디스크가 작업을 마치는 시점에 다른 작업이 들어오지 않더라도 그 작업을 마치자마자 또 다르 작업을 시작할 수 있다
        - 이 과정에서 걸리는 시간은 없다고 가정한다
- 각 작업에 대한 반환 시간은 작업 요청부터 종료까지 걸린 시간으로 정의한다
- 작업에 대한 정보가 담긴 2차원 정수 배열 jobs의 길이는 1 이상 500 이하이다
    - jobs[i]는 i번 작업에 대한 정보로, [s, l] 형태이다
    - s는 작업이 요청되는 시점이며, 0 이상 1,000 이하이다
    - l은 작업의 소요 시간이며, 1 이상 1,000 이하이다

Example:
- Input : jobs=[[0, 3], [1, 9], [3, 5]]
- Output : 8

Note:
문제에 주어진 우선순위 디스크 컨트롤러의 동작을 그대로 구현
heapq를 사용하여 우선순위에 따른 대기 큐를 구현

"""

import heapq

def solution(jobs):
    heap = []
    time, answer, finish = 0, 0, 0
    before = -1

    while finish < len(jobs):
        for s, l in jobs:
            if before < s <= time:
                heapq.heappush(heap, (l, s))

        if heap:
            l, s = heapq.heappop(heap)
            before = time
            time += l
            answer += time - s
            finish += 1
        else:
            time += 1

    return answer // len(jobs)